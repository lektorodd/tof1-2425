[
  {
    "objectID": "intro1-python.html",
    "href": "intro1-python.html",
    "title": "Intro til programmering i Python - Del 1",
    "section": "",
    "text": "F√• denne fila inn i Jupyter Lab?\n\n\n\n\n\n\nOpne Jupyter Lab og velg Fil &gt; Open from URL...\n\nLim inn lenka under i feltet:\nhttps://raw.githubusercontent.com/lektorodd/tof1-2425/main/intro1-python.ipynb\n\nTrykk Enter og fila vil opna seg i Jupyter Lab.\nKort introduksjon til programmering i Python."
  },
  {
    "objectID": "intro1-python.html#utskrift",
    "href": "intro1-python.html#utskrift",
    "title": "Intro til programmering i Python - Del 1",
    "section": "Utskrift",
    "text": "Utskrift\n\nprint(\"Hei ToF1!\")\n\nHei ToF1!\n\n\n\nprint(\"Lange tekstar med mange ord\")\n\nLange tekstar med mange ord\n\n\n\nprint(2+3)\nprint(\"2+3\")\nprint(\"2\" + \"3\")\n\n5\n2+3\n23\n\n\n\nprint(\"tor\"+\"odd\")\n\ntorodd\n\n\n\nprint(\"Tof)\n\nSyntaxError: unterminated string literal (detected at line 1) (3785197553.py, line 1)\n\n\nTips: sjekk heilt nederst i feilmeldinga.\nHer er det ein streng som ikkje er avslutta (det manglar hermeteikn)."
  },
  {
    "objectID": "intro1-python.html#variablar",
    "href": "intro1-python.html#variablar",
    "title": "Intro til programmering i Python - Del 1",
    "section": "Variablar",
    "text": "Variablar\n\nnamn = \"Torodd\" \nalder = 32\nprint(namn, alder)\n\nTorodd 32\n\n\nFinare utskrift med f-streng:\n\nprint(f\"Eg heiter {namn} og er {alder} √•r\")\n\nEg heiter Torodd og er 32 √•r\n\n\nMe kan be om input fr√• brukar:\n\n# Be om input\nnamn = input(\"Kva heiter du?\")\nalder = input(\"Kor gammal er du?\")\n\nprint(f\"Du heiter {namn} og er {alder} √•r\")\n\nDu heiter Torodd og er 32 √•r"
  },
  {
    "objectID": "intro1-python.html#datatypar",
    "href": "intro1-python.html#datatypar",
    "title": "Intro til programmering i Python - Del 1",
    "section": "Datatypar",
    "text": "Datatypar\nDet er ulike datatypar i Python:\n\nstreng = \"tekst\"   # str\nheiltal = 12       # int\ndesimaltal = 2.0   # float (flyttal)\nlogisk = True      # bool (enten True (1) eller False (0))\n\nDatatypar avgjer kva som g√•r og ikkje. Til d√∏mes kan me ikkje legga saman ein teksttren og eit heiltal:\n\nprint(streng + heiltall)\n\nNameError: name 'heiltall' is not defined\n\n\nTekst + tekst g√•r derimot fint:\n\nprint(streng+streng)\n\nteksttekst\n\n\nSj√• p√• denne. Ser du ‚Äúlogikken‚Äù? üòä\n\nprint(heiltal + logisk)\n\n13\n\n\nHeiltal + desimaltal gjer automatisk om datatypen til desimaltal:\n\nprint(heiltal + desimaltal)\n\n14.0\n\n\nVed input blir alt tolka som tekst. Me m√• derfor konvertera til tal for √• rekna med det:\n\n# gjere om tekst til heiltal\nalder = int(input(\"Kor gammal er du?\"))\n\nprint(2024-alder)\n\n2008"
  },
  {
    "objectID": "intro1-python.html#rekneoperasjonar",
    "href": "intro1-python.html#rekneoperasjonar",
    "title": "Intro til programmering i Python - Del 1",
    "section": "Rekneoperasjonar",
    "text": "Rekneoperasjonar\n\na = 2\nb = 3\n\n\nprint(\"a + b =\", a+b)    \nprint(\"a - b =\", a-b)\nprint(\"a * b =\", a*b)\nprint(\"a / b =\", a/b)\nprint(\"a^b =\", a**b)\n\na + b = 5\na - b = -1\na * b = 6\na / b = 0.6666666666666666\na^b = 8\n\n\nI tillegg til dei ‚Äúvanlege‚Äù rekneoperasjonane er det to litt andre operasjonar. Sj√• om du ser m√∏nsteret:\n\nprint(11%3)\nprint(11//3)\nprint() # blank linje\nprint(10%3)\nprint(10//3)\nprint() # blank linje\nprint(9%3)\nprint(9//3)\n\n\n2\n3\n\n1\n3\n\n0\n3\n\n\n11//3 er heiltalsdivisjon, alts√• g√•r 3 opp i 11 tre gonger.\n11%3 er resten etter heiltalsdivisjon, alts√• 2. (\\(3\\cdot 3=9\\) og \\(11-9=2\\))"
  },
  {
    "objectID": "intro1-python.html#oppg√•ve",
    "href": "intro1-python.html#oppg√•ve",
    "title": "Intro til programmering i Python - Del 1",
    "section": "Oppg√•ve",
    "text": "Oppg√•ve\nBrukt det me har l√¶rt til no. Lag kalkulatorar som:\n\nBer brukaren skrive inn eit antal liter og som skriv¬†ut kor mange desiliter det tilsvarer (s√∏rg for at brukaren kan skrive inn desimaltal).\nBer brukaren skrive inn temperaturen i grader fahrenheit og som skriv¬†ut temperaturen i grader celsius.\nBer brukaren skrive inn eit antal minutt¬†og som skriv¬†ut kor mange timar (og eventuelt minutt) det svarer til. Her kan det vere nyttig √• bruke heiltalsdivisjon og modulus. input p√• 63 skal gje output ‚Äú1 time og 3 minutt‚Äù.\n\nF√•r du det til kan du gjerne pr√∏ve √• utvide kalkulator 3 til √• dele inn i veker, dagar, timar og minutt (feks).\n\nForslag til l√∏ysing av oppg√•ve 1\n\nliter = float(input(\"Skriv inn liter: \"))\ndesiliter = liter * 10\n\nprint(f\"{liter} L tilsvarar {desiliter:.2f} dL\") \n#:.2f avrundar til 2 desimalar\n\n3.14 L tilsvarar 31.40 dL\n\n\n\n\nForslag til l√∏ysing av oppg√•ve 3:\n\nminutt_input = int(input(\"Tal minutt: \"))\ntimar =  minutt_input // 60\nminutt = minutt_input % 60\nprint(f\"{minutt_input} min tilsvarar {timar} t og {minutt} min\")\n\n63 min tilsvarar 1 t og 3 min\n\n\n\n# tips for √• holda styr p√• d√∏gn, timar osv. \n# ha ein variabel for √• holda styr p√• kor mange minutt \n# du har \"brukt opp\" etterkvart."
  },
  {
    "objectID": "intro1-python.html#neste-gong",
    "href": "intro1-python.html#neste-gong",
    "title": "Intro til programmering i Python - Del 1",
    "section": "Neste gong",
    "text": "Neste gong\n\nvilk√•r\nl√∏kker\nfunksjonar\nkanskje numpy og pyplot"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Teknologi og forskningsl√¶re 1 - Amalie Skram vgs",
    "section": "",
    "text": "Relevant fagstoff til bruk i tof1 2024-2025."
  },
  {
    "objectID": "index.html#presentasjonar",
    "href": "index.html#presentasjonar",
    "title": "Teknologi og forskningsl√¶re 1 - Amalie Skram vgs",
    "section": "Presentasjonar",
    "text": "Presentasjonar\n\nOm faget\nVitskapleg metode"
  },
  {
    "objectID": "index.html#programmering",
    "href": "index.html#programmering",
    "title": "Teknologi og forskningsl√¶re 1 - Amalie Skram vgs",
    "section": "Programmering",
    "text": "Programmering\n\nIntro 1 (29. august)"
  },
  {
    "objectID": "intro2-python.html",
    "href": "intro2-python.html",
    "title": "Intro til programmering i Python - Del 2",
    "section": "",
    "text": "F√• denne fila inn i Jupyter Lab?\n\n\n\n\n\n\nOpne Jupyter Lab og velg Fil &gt; Open from URL...\n\nLim inn lenka under i feltet: ny lenke her\nhttps://raw.githubusercontent.com/lektorodd/tof1-2425/main/intro1-python.ipynb\n\nTrykk Enter og fila vil opna seg i Jupyter Lab."
  },
  {
    "objectID": "intro2-python.html#for-l√∏kker",
    "href": "intro2-python.html#for-l√∏kker",
    "title": "Intro til programmering i Python - Del 2",
    "section": "for-l√∏kker",
    "text": "for-l√∏kker\nPraktiske n√•r me vil gjenta noko fleire gonger, spesielt om me veit kor mange gonger me skal repetera.\nSj√• p√• d√∏ma under. Ser du kva dei ulike tala i range()-funksjonen gjer?\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\nfor i in range(5, 11):\n    print(i)\n\n5\n6\n7\n8\n9\n10\n\n\n\nfor i in range(5, 11, 2):\n    print(i)\n\n5\n7\n9\n\n\n\nfor tall in range(1, 11):\n    print(tall)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\nOppg√•ve!\nBruk informasjonen om¬†range()¬†og skriv om koden ovanfor slik at utskriften blir:\n1. Tala¬†fr√•¬†og med 1 til og med 30.\n2. Dei f√∏rste 100 partala.\n3. 5-gongen (fr√• og med 5 til og med 50).\n4. Tal-sekvensen 21, 28, 35, 42.\n\nfor i in range(1, 31):\n    print(i, end=\", \")\n\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, \n\n\n\nfor i in range(1, 101):\n    print(2*i, end=\", \")\n\n2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, \n\n\nMe kan ogs√• bruka for-l√∏kker for √• g√• gjennom element i ei liste.\n\nfruktliste = [\"Eple\", \"P√¶re\", \"Banan\", \"Plomme\"]\n\nfor frukt in fruktliste:\n    print(frukt)\n\nEple\nP√¶re\nBanan\nPlomme\n\n\nDet er heller ikkje slik at me m√• bruka i-en (eller kva me no vel √• kalla den) i l√∏kka. Me kan kun bruka l√∏kka for √• gjenta noko eit visst antal gonger.\n\nfor i in range(5):\n    print(\"Torodd\")\n\nTorodd\nTorodd\nTorodd\nTorodd\nTorodd"
  },
  {
    "objectID": "intro2-python.html#vilk√•r-og-logiske-operatorar",
    "href": "intro2-python.html#vilk√•r-og-logiske-operatorar",
    "title": "Intro til programmering i Python - Del 2",
    "section": "Vilk√•r og logiske operatorar",
    "text": "Vilk√•r og logiske operatorar\nHandlar om boolske variablar (som me snakka om sist)\n\na = 4\nb = 5\n\nprint(a == b)  # like?\nprint(a &lt;= b)  # mindre eller lik?\nprint(a &gt;= b)  # st√∏rre eller lik?\nprint(a &lt; b)   # mindre enn?\nprint(a &gt; b)   # st√∏rre enn?\nprint(a != b)  # ulik\n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n\n# kan kombinere\n\nprint(a&lt;b or a&gt;b)       # minst ein av dei m√• stemma\nprint(a&lt;b and a&gt;b)      # begge m√• stemma\n\nTrue\nFalse\n\n\n\nOppg√•ve\nSjekk om eit tal (input) er eit partal st√∏rre enn 100.\n(hint: modulus)\n\n# hente inn tal og gjere om til heiltal\ntal = int(input(\"Skriv inn eit tal: \"))\n          \n# sjekke om talet er b√•de partal og st√∏rre enn 100\n# skrive ut resultatet\nprint(tal&gt;100 and tal%2==0)\n\nFalse"
  },
  {
    "objectID": "intro2-python.html#ifelse-setningar",
    "href": "intro2-python.html#ifelse-setningar",
    "title": "Intro til programmering i Python - Del 2",
    "section": "if/else-setningar",
    "text": "if/else-setningar\nGjer at me kan ta valg i koden basert p√• vilk√•r\n\n# hente inn tal og gjere om til heiltal\ntal = int(input(\"Skriv inn eit tal: \"))\n\nif tal&gt;100 and tal%2==0:\n    print(f\"{tal} er st√∏rre enn 100 og partal\")\nelse:\n    print(f\"{tal} er ikkje st√∏rre enn 100 og partal\")\n\n100 er ikkje st√∏rre enn 100 og partal\n\n\n\nalder = int(input(\"Skriv inn alderen din: \"))\n\n# if elif else\nif alder &lt; 16:\n    print(\"Du er ikkje gamal nok til √• k√∏yra bil\")\nelif alder &lt; 18:\n    print(\"Du kan l√¶rek√∏yra\")\nelse:\n    print(\"Du kan ta lappen\")\n\nDu kan l√¶rek√∏yra"
  },
  {
    "objectID": "intro2-python.html#while-l√∏kker",
    "href": "intro2-python.html#while-l√∏kker",
    "title": "Intro til programmering i Python - Del 2",
    "section": "While-l√∏kker",
    "text": "While-l√∏kker\nL√∏kker som er nyttige n√•r me ikkje veit kor mange gonger me skal gjenta noko. L√∏kka held fram s√• lenge vilk√•ret er sant.\n\nx = 1\n\nwhile x &lt; 11:\n    print(x, end=\", \")\n    x = x + 1            # kan og skriva: x += 1\n\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \n\n\n\nprint(x)\n\n11\n\n\n\n\n\n\n\n\nUendelege l√∏kker\n\n\n\nOm vilk√•ret i ei while-l√∏kke aldri blir usant, vil l√∏kka k√∏yra for alltid.\nD√∏me p√• ein slik kode:\nx = 1\nwhile x &lt; 10:\n    print(x)\n\n\n\n# skrive ut alle kubikktal mindre enn 10 000.\ntal = 1\n\nwhile tal**3 &lt; 10000:\n    print(tal**3, end=\", \")\n    tal += 1\n\n1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261,"
  },
  {
    "objectID": "intro2-python.html#funksjonar",
    "href": "intro2-python.html#funksjonar",
    "title": "Intro til programmering i Python - Del 2",
    "section": "Funksjonar",
    "text": "Funksjonar\nMe kan laga v√•re eigne funksjonar i python. Dette kan vera alt fr√• enkle funksjonar som returnerer eit resultat (som matematiske fuksjonar), til meir komplekse funksjonar som gjer fleire ting.\nMe kan t.d. laga ein funksjon for den matematiske funksjonen \\(f(x) = 3x+4\\).\n\ndef f(x):\n    return 3*x + 4\n\n\nprint(f(9))\n\n31\n\n\n\nprint(f\"x = 3, f(x) = {f(3)}\")\n\nx = 3, f(x) = 13\n\n\nFunksjonar kan ta inn eitt eller fleire argument. Funksjonen kan gjera noko (som feks. printe noko til skjermen) eller returnere noko (som feks. eit resultat).\n\n# helsefunksjon - definerer\ndef helsing(namn, alder):\n    print(f\"Du heiter {namn} og er {alder} √•r\")\n\n# bruker funksjonen\nhelsing(\"Torodd\", 33)\n\nDu heiter Torodd og er 33 √•r\n\n\n\nRekursive funksjonar\nFunksjonar som kallar seg sj√∏lv. Nyttig n√•r ein t.d. skal rekne ut ledd i ei talf√∏lge som baserer seg p√• tidlegare ledd.\nLedd \\(n\\), \\(a_n\\), i talf√∏lgja \\(1, 3, 7, 15, \\ldots\\) kan me uttrykka som \\(a_n = 2\\cdot a_{n-1} + 1\\).\n\n# Rekursive formlar \ndef a(n):\n    if n==1:\n        return 1\n    else: \n        return 2*a(n-1) + 1\n\n\na(1)\n\n1\n\n\n\na(3)\n\n7\n\n\n\n# bruke for-l√∏kke for √• skrive ut dei 10 f√∏rste ledda:\nfor i in range(1, 11):\n    print(a(i), end=\", \")\n\nprint(\"...\")\n\n1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, ..."
  },
  {
    "objectID": "intro2-python.html#oppg√•ver-fr√•-project-euler",
    "href": "intro2-python.html#oppg√•ver-fr√•-project-euler",
    "title": "Intro til programmering i Python - Del 2",
    "section": "Oppg√•ver fr√• Project Euler",
    "text": "Oppg√•ver fr√• Project Euler\nProject Euler er ei nettside med matematiske problem som ein kan l√∏ysa ved hjelp av programmering. Me skal sj√• p√• nokre av desse oppg√•vene.\n\nProblem 1\nIf we list all the natural numbers below \\(10\\) that are multiples of \\(3\\) or \\(5\\), we get \\(3, 5, 6\\) and \\(9\\). The sum of these multiples is \\(23\\).\n\n\nFind the sum of all the multiples of \\(3\\) or \\(5\\) below \\(1000\\).\n\n\nProblem 2\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with \\(1\\) and \\(2\\), the first \\(10\\) terms will be: \\[1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\dots\\]\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]